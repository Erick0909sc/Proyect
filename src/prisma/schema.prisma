// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               Role                 @default(User)
  cart               Cart?
  accounts           Account[]
  sessions           Session[]
  PasswordResetToken PasswordResetToken[]
  reviews            Review[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  timestamp DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  products  Product[]
  discounts CategoryDiscount[]
}

model Brand {
  id        Int             @id @default(autoincrement())
  name      String
  products  Product[]
  discounts BrandDiscount[]
}

model Product {
  code            String        @id
  name            String
  description     String
  price           Float
  image           String
  rating          Float
  discount        Float
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      Int
  cartItems       CartItem[]
  deletedAt       DateTime?
  brand           Brand?        @relation(fields: [brandId], references: [id])
  brandId         Int?
  unitOfMeasure   UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id])
  unitOfMeasureId Int
  reviews         Review[]
}

model UnitOfMeasure {
  id           Int       @id @default(autoincrement())
  name         String
  abbreviation String
  Product      Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  products  CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  product     Product  @relation(fields: [productCode], references: [code], onDelete: Cascade)
  productCode String
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productCode, cartId])
}

enum Role {
  User
  Admin
  Manager
}

model Offer {
  id         Int                @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  image      String
  categories CategoryDiscount[]
  brands     BrandDiscount[]
}

model CategoryDiscount {
  id         Int      @id @default(autoincrement())
  offer      Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId    Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  discount   Float
}

model BrandDiscount {
  id       Int   @id @default(autoincrement())
  offer    Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId  Int
  brand    Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId  Int
  discount Float
}

model Review {
  id          Int      @id @default(autoincrement())
  productCode String
  userId      String
  description String
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productCode], references: [code], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum Role {
//   User, // Cliente (acceso limitado, principalmente para compras)
//   Salesperson, // Representante de Ventas (puede gestionar pedidos y atender consultas)
//   WarehouseManager, // Gerente de Almacén (gestiona el inventario y envíos)
//   Admin, // Administrador (acceso completo al dashboard, gestiona empleados y configuración)
//   FinanceManager, // Gerente de Finanzas (gestiona las transacciones y las finanzas)
//   CustomerSupport, // Soporte al Cliente (responde a preguntas y problemas de los clientes)
//   DeliveryManager, // Encargado de Entrega (gestiona las entregas y conductores)
// }
